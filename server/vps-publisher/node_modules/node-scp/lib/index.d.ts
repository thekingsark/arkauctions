/// <reference types="node" />
import { EventEmitter } from "events";
import { Client as SSHClient, ConnectConfig, InputAttributes, SFTPWrapper, Stats, TransferOptions, WriteFileOptions } from "ssh2";
import { ClientEvents } from "./types";
export declare type TScpOptions = ConnectConfig & {
    remoteOsType?: "posix" | "win32";
    events?: ClientEvents;
};
export declare class ScpClient extends EventEmitter {
    sftpWrapper: SFTPWrapper | null;
    sshClient: SSHClient | null;
    remotePathSep: string;
    endCalled: boolean;
    errorHandled: boolean;
    constructor(options: TScpOptions);
    /**
     * Uploads a file from `localPath` to `remotePath` using parallel reads for faster throughput.
     */
    uploadFile(localPath: string, remotePath: string, options?: TransferOptions): Promise<void>;
    /**
     * Downloads a file at `remotePath` to `localPath` using parallel reads for faster throughput.
     */
    downloadFile(remotePath: string, localPath: string, options?: TransferOptions): Promise<void>;
    /**
     * Clean a directory in remote server
     */
    emptyDir(dir: string): Promise<void>;
    uploadDir(src: string, dest: string): Promise<void>;
    downloadDir(remotePath: string, localPath: string): Promise<string>;
    /**
     * Retrieves attributes for `path`.
     */
    stat(remotePath: string): Promise<Stats>;
    /**
     * Sets the attributes defined in `attributes` for `path`.
     */
    setstat(path: string, attributes?: InputAttributes): Promise<void>;
    /**
     * Removes the file/symlink at `path`.
     */
    unlink(remotePath: string): Promise<void>;
    _rmdir(remotePath: string): Promise<void>;
    rmdir(remotePath: string): Promise<void>;
    /**
     * Creates a new directory `path`.
     */
    mkdir(remotePath: string, attributes?: InputAttributes): Promise<void>;
    exists(remotePath: string): Promise<string | boolean>;
    /**
     * Writes data to a file
     */
    writeFile(remotePath: string, data: string | Buffer, options?: WriteFileOptions): Promise<void>;
    /**
     * Sets the access time and modified time for `path`.
     */
    utimes(path: string, atime: number | Date, mtime: number | Date): Promise<void>;
    /**
     * Creates a symlink at `linkPath` to `targetPath`.
     */
    symlink(targetPath: string, linkPath: string): Promise<void>;
    /**
     * Renames/moves `srcPath` to `destPath`.
     */
    rename(srcPath: string, destPath: string): Promise<void>;
    /**
     * Retrieves the target for a symlink at `path`.
     */
    readlink(path: string): Promise<string>;
    /**
     * Reads a file in memory and returns its contents
     */
    readFile(remotePath: string): Promise<Buffer>;
    /**
     * Retrieves attributes for `path`. If `path` is a symlink, the link itself is stat'ed
     * instead of the resource it refers to.
     */
    lstat(path: string): Promise<Stats>;
    /**
     * Appends data to a file
     */
    appendFile(remotePath: string, data: string | Buffer, options: WriteFileOptions): Promise<void>;
    /**
     * Sets the mode for `path`.
     */
    chmod(path: string, mode: number | string): Promise<void>;
    /**
     * Sets the owner for `path`.
     */
    chown(path: string, uid: number, gid: number): Promise<void>;
    /**
     * Close SSH connection
     */
    close(): void;
    /**
     * List all files and directories at remotePath
     */
    list(remotePath: string, pattern?: RegExp): Promise<any>;
    /**
     * Resolves `path` to an absolute path.
     */
    realPath(remotePath: string): Promise<string>;
}
export declare function Client(options: TScpOptions): Promise<ScpClient>;
export default Client;
